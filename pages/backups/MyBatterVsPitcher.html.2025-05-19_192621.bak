<!-- In this version:
All functions are working propely
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>MLB Batter Vs. Pitcher</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; font-size: 12px; }
        /* Style the current date */
		.current-date {
			font-size: 13px; /* Slightly fancy */
			font-weight: 500; /* A lighter weight for elegance */
			color: #888; /* Light gray */
			font-style: italic;
			letter-spacing: 0.5px; /* Slight spacing for a sleek look */
			margin: 0 25px; /* Extra space between arrows */
		}

		/* Refine navigation spacing */
		.nav-container {
			display: flex;
			justify-content: center;
			align-items: center;
			margin: 15px 0;
		}

		/* Update arrow styling */
		.nav-link {
			text-decoration: none;
			font-size: 13px;
			font-weight: bold;
			padding: 10px;
			color: #888;
			transition: all 0.3s ease-in-out;
		}
		.nav-link:hover {
			text-decoration: underline;
			color: #555;
		}
		table { width: 90%; border-collapse: collapse; margin: 10px auto; opacity: 0; animation: fadeIn 1s forwards; }
        th, td { text-align: left; padding: 6px; border: 1px solid #ddd; font-size: 11px; }
        .star { cursor: pointer; font-size: 16px; padding-left: 5px; transition: all 0.2s ease-in-out; color: gray; }
        .star.selected { color: gold; }
        .star:hover { text-shadow: 0px 0px 5px gold; }
        .favorite-container { margin-top: 15px; font-size: 14px; font-weight: bold; }
        .remove-btn { font-size: 14px; cursor: pointer; color: red; margin-right: 4px; }
        .header-container { display: flex; justify-content: center; align-items: center; position: relative; }
        .clear-btn { position: absolute; right: 30%; padding: 6px 12px; border: 1px solid #ccc; background-color: #f8f9fa; color: #333; border-radius: 5px; cursor: pointer; transition: 0.3s; }
        .clear-btn:hover { background-color: #e2e6ea; }
		#togglePlayersBtn { display: block; margin: 10px auto 20px; padding: 6px 12px; border: none; background-color: #007bff; color: white; border-radius: 5px; cursor: pointer; transition: 0.3s; }
        #togglePlayersBtn:hover { background-color: #0056b3; }
        #player-list span { display: inline-block; margin-right: 10px; }
        #stats-container { width: 90%; margin: 0 auto; overflow-y: auto; }


		/* Style the search box */
		.dataTables_filter input {
			width: 200px;  /* Adjust width */
			padding: 3px;  /* Add padding */
			margin: 15px 15px;
			border: 2px solid #007bff; /* Change border color */
			border-radius: 5px; /* Rounded corners */
			background-color: #f8f9fa; /* Light gray background */
			font-size: 10px; /* Adjust text size */
			color: #333; /* Change text color */
		}
		
		/* Shrink the overall table width */
		table.dataTable {
			width: 100%; /* Reduce from 90% to 80% */
			table-layout: auto !important; /* Prevent automatic resizing */
		}

		.dataTables_scrollBody {
			  width: 100% !important;
		  }

		/* Change placeholder text color */
		.dataTables_filter input::placeholder {
			color: #888;
			font-style: italic;
		}

		/* Add hover effect */
		.dataTables_filter input:hover {
			border-color: #0056b3;
			background-color: #e9ecef;
		}

		/* Add focus effect */
		.dataTables_filter input:focus {
			outline: none;
			border-color: #004085;
			box-shadow: 0 0 5px #007bff;
		}
		
		.dataTables_scrollHead {
			overflow: hidden !important; /* ✅ Prevents extra scrolling */
		}
		.dataTables_scrollHeadInner {
			width: 100% !important;
		}

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
		
		.player-details {
			font-size: 8px;
			color: #888; /* Light gray */
			margin-left: 4px; /* Adds spacing */
		}
		
		/* Left-align table headers */
		table.dataTable th {
			text-align: left !important;
			padding-left: 2px; /* Add slight padding for better spacing */
		}
		
		/* Force table headers to be left-aligned */
		table.dataTable thead th {
			text-align: left !important;
		}

		table.dataTable th, table.dataTable td {
			padding: 3px 2px; /* Reduce padding for a tighter fit */
			font-size: 10px; /* Smaller font size */
			vertical-align: middle; /* Ensure text aligns properly */
			text-align: left;
		}

		/* Ensure Batter & Pitcher names take up 64% */
		td:nth-child(2), td:nth-child(4) {
			text-align: left;
			width: 20% !important; /* Each gets 32%, totaling 64% */
			padding-left: 4px;
		}

		/* Compress less important columns */
		td:nth-child(1), td:nth-child(3), td:nth-child(5), td:nth-child(6), td:nth-child(7), td:nth-child(8),
		td:nth-child(9), td:nth-child(10), td:nth-child(11), td:nth-child(12),
		td:nth-child(13), td:nth-child(14), td:nth-child(15), td:nth-child(16) {
			width: 3%;
			padding-left: 4px;
		}
		/* Force headers to stay left-aligned */
		table.dataTable thead th {
			text-align: left !important;
		}

		/* Override sorting classes applied by DataTables */
		table.dataTable thead th.sorting,
		table.dataTable thead th.sorting_asc,
		table.dataTable thead th.sorting_desc {
			text-align: left !important;
			padding-left: 6px !important; /* Maintain left spacing */
		}
		
    </style>
</head>
<body>
	<script>
        let selectedDate = "{{ date }}";  // ✅ Fetch date from Flask
    </script>

    <div class="header-container">
        <h2>Manage My Players</h2>
        <button class="clear-btn" onclick="clearFavorites()">Clear My Players</button>
    </div>
    <div id="player-list"></div>

    <div class="nav-container">
        <a id="prev-day" class="nav-link" href="#">« <span id="prev-date"></span></a>
        <span class="current-date" id="date-display"></span>
        <a id="next-day" class="nav-link" href="#"><span id="next-date"></span> »</a>
    </div>
    
    <button id="togglePlayersBtn" onclick="toggleFavorites()">Show My Players Only</button>

    <div id="stats-container">
        <strong class='loading-message'>⏳ Loading Data...</strong>
    </div>

    <script>
		let statsLoaded = false;
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                let date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + JSON.stringify(value) + expires + "; path=/";
        }

        function getCookie(name) {
            let cookies = document.cookie.split("; ");
            for (let cookie of cookies) {
                let [key, value] = cookie.split("=");
                if (key === name) return JSON.parse(value || "[]");
            }
            return [];
        }

        let favoritePlayers = getCookie("favoritePlayers");
        let showingFavorites = false;

        function loadStats(selectedDate) {
			if (!selectedDate) {
				let urlParams = new URLSearchParams(window.location.search);
				selectedDate = urlParams.get("date") || new Date().toISOString().split("T")[0];  // ✅ Default to today if no date is provided
				console.warn("⚠ No date found, defaulting to:", selectedDate);
			}

			$("#stats-container").html("<strong class='loading-message'>⏳ Loading Data...</strong>");

			$.getJSON(`/stats?date=${selectedDate}`, function(data) {  // ✅ Fetch stats for the selected date
				$("#stats-container").empty();

				if (!data || data.length === 0) {
					$("#stats-container").html("<div class='error-message'>⚠ No data available for this date.</div>");
					return;
				}

				let tableHTML = `
					<table id="stats-table">
						<thead>
							<tr>
								<th style="text-align: left;">Team</th>
								<th style="text-align: left;">Batter</th>
								<th style="text-align: left;">Team</th>
								<th style="text-align: left;">Pitcher</th>
								<th style="text-align: left;">PA</th>
								<th style="text-align: left;">AB</th>
								<th style="text-align: left;">H</th>
								<th style="text-align: left;">1B</th>
								<th style="text-align: left;">2B</th>
								<th style="text-align: left;">3B</th>
								<th style="text-align: left;">HR</th>
								<th style="text-align: left;">BB</th>
								<th style="text-align: left;">SO</th>
								<th style="text-align: left;">AVG</th>
								<th style="text-align: left;">OBP</th>
								<th style="text-align: left;">SLG</th>
							</tr>
						</thead>
						<tbody></tbody>
					</table>
				`;
				$("#stats-container").html(tableHTML);

				let table = $("#stats-table").DataTable({
					"paging": false,
					"scrollY": "600px",
					"ordering": true,
					"info": false,
					"language": { "search": "Search Players:" },
					"autoWidth": false,
					"columnDefs": [
						{ "width": "20%", "targets": [1, 3] }, /* Batter & Pitcher columns */
						{ "width": "4%", "targets": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] } /* Stat columns */
					]
				});
				$(".dataTables_scrollBody").on("scroll", function () {
					let scrollLeft = $(this).scrollLeft();
					$(".dataTables_scrollHead").scrollLeft(scrollLeft);
				});

				setTimeout(function() {
					let tableWidth = $(".dataTables_scrollBody table").outerWidth();
					$(".dataTables_scrollBody").css("width", tableWidth + "px");
					$(".dataTables_scrollHeadInner").css("width", tableWidth + "px"); // ✅ Force header to match body width
				}, 300);


				data.forEach(row => {
					if (showingFavorites && !favoritePlayers.includes(row.batter) && !favoritePlayers.includes(row.pitcher)) {
						return;
					}

					let batterStar = `<span class='star ${favoritePlayers.includes(row.batter) ? "selected" : ""}' data-player="${row.batter}" onclick='toggleFavorite("${row.batter}")'>✩</span>`;
					let pitcherStar = `<span class='star ${favoritePlayers.includes(row.pitcher) ? "selected" : ""}' data-player="${row.pitcher}" onclick='toggleFavorite("${row.pitcher}")'>✩</span>`;

					table.row.add([
						row.team_batter, `${batterStar} ${row.batter} <span class='player-details'>${row.batter_info || ""}</span>`,
						row.team_pitcher, `${pitcherStar} ${row.pitcher} <span class='player-details'>${row.pitcher_hand || ""}</span>`,
						row.stats.PA, row.stats.AB, row.stats.H, row.stats["1B"], row.stats["2B"], row.stats["3B"], row.stats.HR,
						row.stats.BB, row.stats.SO, row.stats.AVG, row.stats.OBP, row.stats.SLG
					]);
				});

				table.draw();
				updateFavoriteList();
				statsLoaded = true;
				syncHeaderOnResize();	
				initializeStatsTable()
			});
		}
		
		$(window).on("resize", function () {
			if (statsLoaded) {
				syncHeaderOnResize();
			}
			initializeStatsTable()
		});
		
		function initializeStatsTable() {
			if ($.fn.DataTable.isDataTable("#stats-table")) {
				$("#stats-table").DataTable().destroy(); // ✅ Destroy previous instance
			}

			$("#stats-table").DataTable({
				autoWidth: false, // ✅ Prevents automatic width interference
				paging: false,  // ✅ Removes the "Show X entries" dropdown
				info: false,    // ✅ Hides "Showing X of Y entries" text
				lengthChange: false // ✅ Prevents row limit selection
			}).columns.adjust().draw();
		}

		function syncHeaderOnResize() {
			let exactWidth = Math.min(
				Math.floor($(".dataTables_scrollBody table").outerWidth()), 
				Math.floor($(".dataTables_scrollHeadInner").outerWidth())
			);

			$(".dataTables_scrollHeadInner").css({
				"width": exactWidth + "px",
				"min-width": exactWidth + "px",
				"max-width": exactWidth + "px"
			});

			// ✅ Recalculate DataTables column widths
			$("#stats-table").DataTable().columns.adjust().draw();
		}


        function toggleFavorite(player) {
            if (favoritePlayers.includes(player)) {
                favoritePlayers = favoritePlayers.filter(p => p !== player);
            } else {
                favoritePlayers.push(player);
            }
            setCookie("favoritePlayers", favoritePlayers, 180);
            document.querySelectorAll(`.star[data-player="${player}"]`).forEach(el => el.classList.toggle("selected"));
            updateFavoriteList();
        }

        function updateFavoriteList() {
            let listContainer = $("#player-list").empty();
            favoritePlayers.forEach(player => {
                listContainer.append(`<span class="remove-btn" onclick="toggleFavorite('${player}')">❌</span><span> ${player}</span>`);
            });
        }
		
        function toggleFavorites() {
			showingFavorites = !showingFavorites;
			$("#togglePlayersBtn").text(showingFavorites ? "Show All Players" : "Show My Players");

			$("#stats-table tbody tr").each(function() {
				// Use the 'data-player' attribute from the star element in each cell
				let batterName = $(this).find("td:nth-child(2) span.star").data("player");
				let pitcherName = $(this).find("td:nth-child(4) span.star").data("player");

				let isFavorited = (batterName && favoritePlayers.includes(batterName)) ||
								  (pitcherName && favoritePlayers.includes(pitcherName));

				$(this).css("display", showingFavorites && !isFavorited ? "none" : "table-row");
			});

			// Adjust DataTable columns after toggling rows
			$("#stats-table").DataTable().columns.adjust();
		}
		
		function clearFavorites() {
            favoritePlayers = [];
            setCookie("favoritePlayers", favoritePlayers, 180);
            updateFavoriteList();
            $(".star").removeClass("selected");
        }
		
		function adjustTableWidth() {
			let table = $("#stats-table");
			let hasScrollbar = table.get(0).scrollHeight > table.get(0).clientHeight;
			
			table.css("width", hasScrollbar ? "calc(100% - 16px)" : "100%"); /* Adjust for scrollbar */
		}
		
		document.addEventListener("DOMContentLoaded", function () {
				console.log("🚀 Monitoring changes to date elements...");

			let observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					console.log(`⚠ Element ${mutation.target.id} changed to:`, mutation.target.textContent);
				});
			});

			observer.observe(document.getElementById("date-display"), { childList: true, subtree: true });
			observer.observe(document.getElementById("prev-date"), { childList: true, subtree: true });
			observer.observe(document.getElementById("next-date"), { childList: true, subtree: true });

			let urlParams = new URLSearchParams(window.location.search);
			let selectedDate = urlParams.get("date") || new Date().toISOString().split("T")[0];

			console.log("🔎 Extracted Date from URL:", selectedDate);

			let currentDateObj = new Date(selectedDate);

			// ✅ Calculate previous and next days AFTER establishing the correct reference date
			let prevDay = new Date(currentDateObj);
			prevDay.setDate(currentDateObj.getDate() - 1);

			let nextDay = new Date(currentDateObj);
			nextDay.setDate(currentDateObj.getDate() + 1);

			// ✅ Ensure elements exist before modifying them
			let prevDateElem = document.getElementById("prev-date");
			let currentDateElem = document.getElementById("date-display");
			let nextDateElem = document.getElementById("next-date");

			if (!prevDateElem || !currentDateElem || !nextDateElem) {
				console.error("❌ Navigation elements not found.");
				return;
			}

			// ✅ Set navigation URLs using the correct reference point
			document.getElementById("prev-day").href = `/?date=${prevDay.toISOString().split("T")[0]}`;
			document.getElementById("next-day").href = `/?date=${nextDay.toISOString().split("T")[0]}`;

			// ✅ Set visible navigation text to match the correct parsed date
			prevDateElem.textContent = formatReadableDate(prevDay);
			currentDateElem.textContent = formatReadableDate(currentDateObj);
			nextDateElem.textContent = formatReadableDate(nextDay);

			console.log("🔄 Navigation Set at Page Load:");
			console.log("⬅ Previous Date:", prevDateElem.textContent);
			console.log("📅 Current Date:", currentDateElem.textContent);
			console.log("➡ Next Date:", nextDateElem.textContent);
		});

		function formatReadableDate(dateObj) {
			let options = { year: "numeric", month: "long", day: "numeric" };
			let formattedDate = dateObj.toLocaleDateString("en-US", options);

			let day = dateObj.getDate();
			let suffix = (day === 1 || day === 21 || day === 31) ? "st" :
						 (day === 2 || day === 22) ? "nd" :
						 (day === 3 || day === 23) ? "rd" : "th";

			return formattedDate.replace(/(\d+)/, `${day}${suffix}`);
		}
        $(document).ready(() => {
            loadStats();
            updateFavoriteList();			
			$("#stats-table").on("draw.dt", adjustTableWidth);
			adjustTableWidth();		
        });
    </script>
</body>
</html>