import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Button,
  TextInput,
  FlatList,
  Image,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Share
} from 'react-native';
import { Audio } from 'expo-av';
import ShimmerPlaceHolder from 'react-native-shimmer-placeholder';
import AnimatedCard from './AnimatedCard';
import { useGlobalStore } from '../store/globalStore';
import { animationPresets } from '../utils/animationPresets';

const getRarityFromName = (name) => {
  const lowered = name.toLowerCase();
  if (lowered.match(/legendary|dragon|phoenix/)) return 'legendary';
  if (lowered.match(/epic|crystal|storm/)) return 'epic';
  if (lowered.match(/rare|silver|arcane/)) return 'rare';
  return 'common';
};

export default function MainFlowScreen({ navigation }) {
  const {
    inventory,
    finalMessage,
    cardImage,
    containerImage,
    hydrate,
    setInventory
  } = useGlobalStore();

  const [numToPick, setNumToPick] = useState('');
  const [pickedItems, setPickedItems] = useState([]);
  const [revealIndex, setRevealIndex] = useState(0);
  const [showFinal, setShowFinal] = useState(false);
  const [introDone, setIntroDone] = useState(false);
  const [history, setHistory] = useState([]);
  const scrollRef = useRef(null);

  const revealSound = useRef(null);
  const finishSound = useRef(null);

  useEffect(() => {
    hydrate();
    runIntroSequence();
    loadSounds();
    return () => {
      revealSound.current?.unloadAsync();
      finishSound.current?.unloadAsync();
    };
  }, []);

  const loadSounds = async () => {
    revealSound.current = new Audio.Sound();
    finishSound.current = new Audio.Sound();
    await revealSound.current.loadAsync(require('../assets/reveal.mp3'));
    await finishSound.current.loadAsync(require('../assets/final.mp3'));
  };

  const runIntroSequence = () => {
    setTimeout(() => {
      scrollRef.current?.scrollToEnd({ animated: true });
      setTimeout(() => setIntroDone(true), 1000);
    }, 1000);
  };

  const shuffleAndPick = () => {
    const flatList = inventory.flatMap(item =>
      Array(item.quantity).fill(item.name)
    );
    const shuffled = flatList.sort(() => 0.5 - Math.random());
    const picked = shuffled.slice(0, parseInt(numToPick));
    setPickedItems(picked);
    setRevealIndex(0);
    setShowFinal(false);
  };

  const showNextItem = async () => {
    await revealSound.current?.replayAsync();
    if (revealIndex < pickedItems.length - 1) {
      setRevealIndex(prev => prev + 1);
    } else {
      setShowFinal(true);
      reduceInventoryQuantities();
      await finishSound.current?.replayAsync();
      setHistory(prev => [...prev, pickedItems]);
    }
  };

  const reduceInventoryQuantities = () => {
    const updated = [...inventory];
    pickedItems.forEach((itemName) => {
      const index = updated.findIndex(i => i.name === itemName);
      if (index !== -1 && updated[index].quantity > 0) {
        updated[index].quantity -= 1;
      }
    });
    setInventory(updated);
  };

  const exportHistory = async () => {
    const text = history
      .map((session, idx) => `Session ${idx + 1}: ${session.join(', ')}`)
      .join('\n\n');

    try {
      await Share.share({
        title: 'Pick History',
        message: text
      });
    } catch (err) {
      console.error('Error sharing:', err);
    }
  };

  const replayLast = () => {
    setShowFinal(false);
    setRevealIndex(pickedItems.length - 1);
  };

  const resetOrder = () => {
    setPickedItems([]);
    setNumToPick('');
    setRevealIndex(0);
    setShowFinal(false);
  };

  return (
    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <Text style={styles.title}>Order Picker</Text>

      {!introDone ? (
        <ScrollView ref={scrollRef} style={{ height: 100 }}>
          {inventory.map((item, i) => (
            <Text key={i} style={styles.scrollItem}>{item.name}</Text>
          ))}
        </ScrollView>
      ) : containerImage && (
        <Image source={{ uri: containerImage }} style={styles.containerPreview} />
      )}

      {!pickedItems.length ? (
        <>
          <Text style={styles.label}>Enter number of items to pick:</Text>
          <TextInput
            style={styles.input}
            keyboardType="numeric"
            value={numToPick}
            onChangeText={setNumToPick}
            placeholder="e.g. 20"
          />
          <Button title="Start Picking" onPress={shuffleAndPick} />
        </>
      ) : (
        <>
          <FlatList
            data={pickedItems.slice(0, revealIndex + 1)}
            keyExtractor={(item, index) => index.toString()}
            numColumns={4}
            renderItem={({ item }) => {
              const rarity = getRarityFromName(item);
              return (
                <ShimmerPlaceHolder
                  visible={true}
                  shimmerStyle={rarity === 'legendary' ? styles.shimmer : null}
                >
                  <AnimatedCard
                    name={item}
                    rarity={rarity}
                    imageSource={cardImage}
                  />
                </ShimmerPlaceHolder>
              );
            }}
            contentContainerStyle={styles.grid}
          />
          {!showFinal ? (
            <Button title="Show Next Item" onPress={showNextItem} />
          ) : (
            <>
              <Text style={styles.finalMessage}>{finalMessage}</Text>
              <Button title="Replay Last Item" onPress={replayLast} />
              <Button title="Start New Order" onPress={resetOrder} />
              <Button title="Export History" onPress={exportHistory} />
            </>
          )}
        </>
      )}

      <View style={styles.bottomButtons}>
        <Button title="Edit Inventory" onPress={() => navigation.navigate('Inventory')} />
        <Button title="Settings" onPress={() => navigation.navigate('Settings')} />
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, flex: 1, backgroundColor: '#fff' },
  title: { fontSize: 28, fontWeight: 'bold', marginBottom: 10 },
  label: { fontSize: 16 },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    padding: 8,
    marginVertical: 10,
    borderRadius: 6
  },
  grid: { alignItems: 'center', marginTop: 20 },
  finalMessage: {
    fontSize: 20,
    fontWeight: '600',
    marginVertical: 20,
    textAlign: 'center'
  },
  containerPreview: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 8,
    alignSelf: 'center'
  },
  shimmer: {
    width: 100,
    height: 110,
    borderRadius: 10,
    margin: 5
  },
  scrollItem: {
    fontSize: 18,
    paddingVertical: 2
  },
  bottomButtons: {
    marginTop: 30,
    flexDirection: 'row',
    justifyContent: 'space-between'
  }
});