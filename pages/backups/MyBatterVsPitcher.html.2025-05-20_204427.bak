<!-- In this version:
All functions are working propely
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Daily MLB Batter Vs. Pitcher History</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
	<link rel="icon" type="image/png" href="{{ url_for('static', filename='images/favicon-96x96.png') }}" sizes="96x96">
	<link rel="icon" type="image/svg+xml" href="{{ url_for('static', filename='images/favicon.svg') }}" />
	<link rel="shortcut icon" href="{{ url_for('static', filename='images/favicon.ico') }}" />
	<link rel="apple-touch-icon" sizes="180x180" href="{{ url_for('static', filename='images/apple-touch-icon.png') }}" />
	<meta name="apple-mobile-web-app-title" content="BvP" />
	<link rel="manifest" href="{{ url_for('static', filename='images/site.webmanifest') }}" />
    <style>
	
		/* üî∑ General Page Styling */
		body { background-color: #E0E8D6; font-family: Arial, sans-serif; text-align: center; font-size: 12px; }
		.current-date { font-size: 14px; font-weight: bold; padding: 5px 10px; background: #C0C8B6; color: white; border-radius: 6px; }

		/* üñ• Dashboard & Panel Styling */
		.dashboard-panel { background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); padding: 16px; margin-bottom: 20px; }
		#header-container, #nav-container { display: flex; align-items: center; justify-content: space-between; padding: 20px; background: white; border-bottom: 2px solid #C0C8B6; }
		#collapsible-container, #stats-container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); }
		#header-nav-panel, #stats-panel { display: flex; flex-direction: column; background: white; padding: 20px; border-radius: 8px; }
		#stats-panel {display: flex; flex-direction: column; background: white;	padding: 20px; border-radius: 8px;	}
		.date-nav-container {background-color: #F8F9FA; padding: 10px; border-radius: 6px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center; gap: 15px; border-top: 2px solid #C0C8B6; padding-top: 8px;}
		.date-card { background: white; padding: 15px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); width: fit-content; margin: auto; text-align: center; }
		.card-header { font-weight: bold; font-size: 16px; color: #333; margin-bottom: 8px; }
		.header-container { display: flex; align-items: center; justify-content: flex-start; gap: 12px; }
		.header-content { display: flex; flex-direction: column; align-items: flex-start; }
		.date-navigation { background-color: #F8F9FA; padding: 8px 12px; border-radius: 6px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); width: fit-content; margin-top: 8px; }
		.date-label { font-weight: bold; text-transform: uppercase; margin-bottom: 4px; }
		.date-options { display: flex; gap: 10px; align-items: center; }

		/* üîó Navigation Styling */
		.nav-container { display: flex; justify-content: center; align-items: center; margin: 15px 0; }
		.nav-link { text-decoration: none; font-size: 13px; font-weight: bold; padding: 10px; color: #888; transition: all 0.3s ease-in-out; }
		.nav-link:hover { text-decoration: underline; color: #555; }
		
		/* üìä Table Styling */
		table { width: 90%; border-collapse: collapse; margin: 10px auto; opacity: 0; animation: fadeIn 1s forwards; }
		th, td { text-align: left; padding: 6px; border: 1px solid #ddd; font-size: 11px; }
		table.dataTable { width: 100%; table-layout: auto !important; }
		.dataTables_scrollBody { width: 100% !important; }
		table.dataTable th, table.dataTable td {padding: 3px 2px; font-size: 10px; vertical-align: middle;	text-align: left;}
		
		/* ‚≠ê Player Management Elements */
		.star { cursor: pointer; font-size: 16px; padding-left: 5px; transition: all 0.2s ease-in-out; color: gray; }
		.star.selected { color: gold; }
		.star:hover { text-shadow: 0px 0px 5px gold; }
		.favorite-container { margin-top: 15px; font-size: 14px; font-weight: bold; }
		.remove-btn { font-size: 14px; cursor: pointer; color: red; margin-right: 4px; }
		#player-list span { display: inline-block; margin-right: 10px; }
		
		/* üîò Button Styling */
		.clear-btn { display: block; width: 80%; margin: 8px auto; padding: 5px; border: none; background-color: #f1f1f1; color: #555; font-size: 11px; font-weight: normal; border-radius: 4px; cursor: pointer; transition: 0.2s ease-in-out; }
		.clear-btn:hover { background-color: #e0e0e0; }
		#togglePlayersBtn { display: block; margin: 10px auto; padding: 6px 12px; border: none; background-color: #666; color: white; border-radius: 5px; cursor: pointer; transition: 0.3s; font-size: 12px; }
		#togglePlayersBtn:hover { background-color: #444; }
		
		/* üîç Search Box Styling */
		.dataTables_filter input { width: 200px; padding: 3px; margin: 15px 15px; border: 2px solid #007bff; border-radius: 5px; background-color: #f8f9fa; font-size: 10px; color: #333; }
		.dataTables_filter input::placeholder { color: #888; font-style: italic; }
		.dataTables_filter input:hover { border-color: #0056b3; background-color: #e9ecef; }
		.dataTables_filter input:focus { outline: none; border-color: #004085; box-shadow: 0 0 5px #007bff; }
		.dataTables_scrollHead { overflow: hidden !important; }
		.dataTables_scrollHeadInner { width: 100% !important; }

		/* üé® Animations & Misc */
		@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
		.player-details { font-size: 8px; color: #888; margin-left: 4px; }

		/* üìà Stats Table Styling */
		#stats-table tbody tr:nth-child(odd) { background-color: #ECF2E6; }
		#stats-table tbody tr:nth-child(even) { background-color: #ffffff; }
		#stats-table thead { background-color: #B0C4A7; color: white; font-weight: bold; border-bottom: 3px solid #8FA382; }
		#stats-table td { padding: 10px; border-bottom: 1px solid #C0C8B6; }
		#stats-table tbody tr:hover { background-color: #D4E1CB; border: 1px solid #C0C8B6; }
		#stats-table thead th { padding: 12px; border: 1px solid #8FA382; }
		#stats-container { width: 90%; margin: 0 auto; overflow-y: auto; }

		/* üî¢ Column Adjustments */
		td:nth-child(2), td:nth-child(4) { text-align: left; width: 20% !important; padding-left: 4px; }
		td:nth-child(1), td:nth-child(3), td:nth-child(5), td:nth-child(6), td:nth-child(7), td:nth-child(8), td:nth-child(9), td:nth-child(10), td:nth-child(11), td:nth-child(12), td:nth-child(13), td:nth-child(14), td:nth-child(15), td:nth-child(16) { width: 3%; padding-left: 4px; }
		table.dataTable thead th { text-align: left !important; }
		table.dataTable thead th.sorting, table.dataTable thead th.sorting_asc, table.dataTable thead th.sorting_desc { text-align: left !important; padding-left: 6px !important; }
		table.dataTable th { text-align: left !important;vpadding-left: 2px; }
		
		/* üìé Collapsible Sections */
		.collapsible-container { width: 90%; margin: 0 auto; text-align: center; }
		.toggle-collapse { display: block; width: 100%; padding: 8px; background-color: #f8f9fa; color: #333; font-size: 13px; font-weight: bold; border: 1px solid #ddd; cursor: pointer; border-radius: 5px; transition: 0.3s ease-in-out; }
		.toggle-collapse:hover { background-color: #e2e6ea; }
		#player-list-wrapper { display: none; padding: 10px; border: 1px solid #ddd; background-color: #f8f9fa; }

		/* üé≠ Logo & Notes */
		#logo { width: 600px; height: 55px; margin-right: 10px; }
		.info-note { font-size: 12px; color: #556B2F; margin-bottom: 10px; text-align: left; }

		/* Ad sections */
		.ad-container { display: flex; flex-direction: column; gap: 10px; align-items: flex-end; margin-left: auto; }
		.ad-box { width: 160px; height: 100px; background: #EEE; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-weight: bold; color: #555; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); }
	</style>
</head>
<body>
	<script>
        let selectedDate = "{{ date }}";  // ‚úÖ Fetch date from Flask
    </script>

	<div id="header-nav-panel" class="dashboard-panel">
		<div class="header-container">
			<div class="header-content">
				<img id="logo" src="{{ url_for('static', filename='images/BVPHeader350x55.png') }}" alt="BvP Logo"><h1>Daily MLB Batter vs. Pitcher History</h1>
				<div class="date-navigation">
					<div class="date-label">üìÖ Select Date</div>
					<div class="date-options">
						<a id="prev-day" class="nav-link" href="#">‚Üê <span id="prev-date"></span></a>
						<span class="current-date" id="date-display"></span>
						<a id="next-day" class="nav-link" href="#"><span id="next-date"></span> ‚Üí</a>
					</div>
				</div>
			</div>
			<div class="ad-container">
				<div class="ad-box">
					<script type="text/javascript">
						var bamAdspace = '682d12d3c664a';
						var bamWidth = 300;
						var bamHeight = 250;
					</script>
					<script type="text/javascript" src="https://www.bamifyads.com/ads.js"></script>
				</div>
				<div class="ad-box">
					<script type="text/javascript">
						/* Home 2 | Medium Rectangle | BVP Railway */
						var bamAdspace = '682d13507ac09';
						var bamWidth = 300;
						var bamHeight = 250;
					</script>
					<script type="text/javascript" src="https://www.bamifyads.com/ads.js"></script>
				</div>
			</div>
		</div>
	</div>
	
	<div id="stats-panel" class="dashboard-panel">
		<div class="collapsible-container">
			<button class="toggle-collapse" onclick="toggleCollapse()">‚ñº Manage My Players</button>
			<div id="player-list-wrapper">
				<p class="info-note">‚≠ê Click the star icon next to a player's name to add them to this list.</p>
				<div id="player-list"></div>
				<div class="clear-button-container">
					<button class="clear-btn" onclick="clearFavorites()">Clear My Players</button>
				</div>
			</div>
		</div>
		<button id="togglePlayersBtn" onclick="toggleFavorites()">Show My Players Only</button>
		<div id="stats-container">
			<strong class='loading-message'>‚è≥ Loading Data...</strong>
		</div>
	</div>

    <script>
		let statsLoaded = false;
        let favoritePlayers = getCookie("favoritePlayers");
        let showingFavorites = false;
		// MAIN INITIALIZATION
		document.addEventListener("DOMContentLoaded", function () {
			console.log("üöÄ Adjusting date logic...");

			// Retrieve date from URL if provided; otherwise use the server-injected date.
			let urlParams = new URLSearchParams(window.location.search);
			let selectedDate = urlParams.get("date") || "{{ date }}";
			console.log("üìÖ Final Selected Date:", selectedDate);

			// Create a Date object at midnight for the selected date.
			let baseDate = new Date(selectedDate + "T00:00:00");

			// Compute the previous and next dates relative to the base date.
			let prevDate = new Date(baseDate);
			prevDate.setDate(baseDate.getDate() - 1);
			let nextDate = new Date(baseDate);
			nextDate.setDate(baseDate.getDate() + 1);

			// Set navigation link URLs using ISO date strings.
			document.getElementById("prev-day").href = "/?date=" + prevDate.toISOString().split("T")[0];
			document.getElementById("next-day").href = "/?date=" + nextDate.toISOString().split("T")[0];

			// Update the visible navigation labels.
			document.getElementById("prev-date").textContent = formatReadableDate(prevDate);
			document.getElementById("date-display").textContent = formatReadableDate(baseDate);
			document.getElementById("next-date").textContent = formatReadableDate(nextDate);

			console.log("üîÑ Navigation Updated:");
			console.log("‚¨Ö Previous Date:", prevDate.toISOString().split("T")[0]);
			console.log("üìÖ Current Date:", selectedDate);
			console.log("‚û° Next Date:", nextDate.toISOString().split("T")[0]);

			// Load stats for the selected date.
			loadStats(selectedDate);

			// Initialize favorites and table adjustments.
			updateFavoriteList();
			$("#stats-table").on("draw.dt", adjustTableWidth);
			adjustTableWidth();
			initializeStatsTable();

			// Re-adjust table width on window resize.
			$(window).on("resize", function () {
				if (statsLoaded) {
					syncHeaderOnResize();
				}
				initializeStatsTable();
			});
		});

		// FUNCTION TO LOAD STATS FOR A GIVEN DATE
		function loadStats(selectedDate) {
			$("#stats-container").html("<strong class='loading-message'>‚è≥ Loading Data...</strong>");
			$.getJSON(`/stats?date=${selectedDate}`, function(data) {
				$("#stats-container").empty();

				if (!data || data.length === 0) {
					$("#stats-container").html("<div class='error-message'>‚ö† No data available for this date.</div>");
					return;
				}

				// Build an HTML table for the stats.
				let tableHTML = `
					<table id="stats-table">
					  <thead>
						<tr>
						  <th style="text-align: left;">Team</th>
						  <th style="text-align: left;">Batter</th>
						  <th style="text-align: left;">Team</th>
						  <th style="text-align: left;">Pitcher</th>
						  <th style="text-align: left;">PA</th>
						  <th style="text-align: left;">AB</th>
						  <th style="text-align: left;">H</th>
						  <th style="text-align: left;">1B</th>
						  <th style="text-align: left;">2B</th>
						  <th style="text-align: left;">3B</th>
						  <th style="text-align: left;">HR</th>
						  <th style="text-align: left;">BB</th>
						  <th style="text-align: left;">SO</th>
						  <th style="text-align: left;">AVG</th>
						  <th style="text-align: left;">OBP</th>
						  <th style="text-align: left;">SLG</th>
						</tr>
					  </thead>
					  <tbody></tbody>
					</table>
				`;
				$("#stats-container").html(tableHTML);

				// Initialize DataTable.
				let table = $("#stats-table").DataTable({
					"paging": false,
					"scrollY": "600px",
					"ordering": true,
					"info": false,
					"language": { "search": "Search Players:" },
					"autoWidth": false,
					"columnDefs": [
						{ "width": "20%", "targets": [1, 3] },
						{ "width": "4%", "targets": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] }
					]
				});

				// Sync horizontal scroll between header and body.
				$(".dataTables_scrollBody").on("scroll", function () {
					let scrollLeft = $(this).scrollLeft();
					$(".dataTables_scrollHead").scrollLeft(scrollLeft);
				});

				setTimeout(function() {
					let tableWidth = $(".dataTables_scrollBody table").outerWidth();
					$(".dataTables_scrollBody").css("width", tableWidth + "px");
					$(".dataTables_scrollHeadInner").css("width", tableWidth + "px");
				}, 300);

				// Populate the table rows.
				data.forEach(row => {
					// If filtering favorites is on, only add favorited players.
					if (showingFavorites && !favoritePlayers.includes(row.batter) && !favoritePlayers.includes(row.pitcher)) {
						return;
					}
					let batterStar = `<span class='star ${favoritePlayers.includes(row.batter) ? "selected" : ""}' data-player="${row.batter}" onclick='toggleFavorite("${row.batter}")'>‚ú©</span>`;
					let pitcherStar = `<span class='star ${favoritePlayers.includes(row.pitcher) ? "selected" : ""}' data-player="${row.pitcher}" onclick='toggleFavorite("${row.pitcher}")'>‚ú©</span>`;

					table.row.add([
						row.team_batter,
						`${batterStar} ${row.batter} <span class='player-details'>${row.batter_info || ""}</span>`,
						row.team_pitcher,
						`${pitcherStar} ${row.pitcher} <span class='player-details'>${row.pitcher_hand || ""}</span>`,
						row.stats.PA,
						row.stats.AB,
						row.stats.H,
						row.stats["1B"],
						row.stats["2B"],
						row.stats["3B"],
						row.stats.HR,
						row.stats.BB,
						row.stats.SO,
						row.stats.AVG,
						row.stats.OBP,
						row.stats.SLG
					]);
				});
				table.draw();
				updateFavoriteList();
				statsLoaded = true;
				syncHeaderOnResize();
				initializeStatsTable();
			}).fail(function(jqXHR, textStatus, errorThrown) {
				console.error("Error fetching stats:", textStatus, errorThrown);
				$("#stats-container").html("<div class='error-message'>‚ö† Error fetching data.</div>");
			});
		}

		// Utility to initialize (or reinitialize) the DataTable.
		function initializeStatsTable() {
			if ($.fn.DataTable.isDataTable("#stats-table")) {
				$("#stats-table").DataTable().destroy();
			}
			$("#stats-table").DataTable({
				autoWidth: false,
				paging: false,
				info: false,
				lengthChange: false
			}).columns.adjust().draw();
		}

		// Adjust header width to sync with table body.
		function syncHeaderOnResize() {
			let exactWidth = Math.min(
				Math.floor($(".dataTables_scrollBody table").outerWidth()),
				Math.floor($(".dataTables_scrollHeadInner").outerWidth())
			);
			$(".dataTables_scrollHeadInner").css({
				"width": exactWidth + "px",
				"min-width": exactWidth + "px",
				"max-width": exactWidth + "px"
			});
			$("#stats-table").DataTable().columns.adjust().draw();
		}

		// Formats a Date object into a readable string with an ordinal suffix.
		function formatReadableDate(dateObj) {
			let options = { year: "numeric", month: "long", day: "numeric" };
			let formattedDate = dateObj.toLocaleDateString("en-US", options);
			let day = dateObj.getDate();
			let suffix = (day % 10 === 1 && day % 100 !== 11) ? "st" :
						 (day % 10 === 2 && day % 100 !== 12) ? "nd" :
						 (day % 10 === 3 && day % 100 !== 13) ? "rd" : "th";
			return formattedDate.replace(/(\d+)/, day + suffix);
		}

		// Favorite players toggling functions.
		function toggleFavorite(player) {
			if (favoritePlayers.includes(player)) {
				favoritePlayers = favoritePlayers.filter(p => p !== player);
			} else {
				favoritePlayers.push(player);
			}
			setCookie("favoritePlayers", favoritePlayers, 180);
			document.querySelectorAll(`.star[data-player="${player}"]`).forEach(el => el.classList.toggle("selected"));
			updateFavoriteList();
		}

		function updateFavoriteList() {
			let listContainer = $("#player-list").empty();
			favoritePlayers.forEach(player => {
				listContainer.append(`<span class="remove-btn" onclick="toggleFavorite('${player}')">‚ùå</span><span> ${player}</span>`);
			});
		}

		function toggleFavorites() {
			showingFavorites = !showingFavorites;
			$("#togglePlayersBtn").text(showingFavorites ? "Show All Players" : "Show My Players");
			$("#stats-table tbody tr").each(function() {
				let batterName = $(this).find("td:nth-child(2) span.star").data("player");
				let pitcherName = $(this).find("td:nth-child(4) span.star").data("player");
				let isFavorited = (batterName && favoritePlayers.includes(batterName)) ||
								  (pitcherName && favoritePlayers.includes(pitcherName));
				$(this).css("display", showingFavorites && !isFavorited ? "none" : "table-row");
			});
			$("#stats-table").DataTable().columns.adjust();
		}

		function toggleCollapse() {
			let wrapper = document.getElementById("player-list-wrapper");
			let button = document.querySelector(".toggle-collapse");
			if (wrapper.style.display === "none" || wrapper.style.display === "") {
				wrapper.style.display = "block";
				button.innerHTML = "‚ñ≤ Manage My Players";
			} else {
				wrapper.style.display = "none";
				button.innerHTML = "‚ñº Manage My Players";
			}
		}

		function clearFavorites() {
			favoritePlayers = [];
			setCookie("favoritePlayers", favoritePlayers, 180);
			updateFavoriteList();
			$(".star").removeClass("selected");
		}

		function adjustTableWidth() {
			let table = $("#stats-table");
			let hasScrollbar = table.get(0).scrollHeight > table.get(0).clientHeight;
			table.css("width", hasScrollbar ? "calc(100% - 16px)" : "100%");
		}

		// In case another jQuery ready-handler is needed.
		$(document).ready(() => {
			updateFavoriteList();
			$("#stats-table").on("draw.dt", adjustTableWidth);
			adjustTableWidth();
		});

        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                let date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + JSON.stringify(value) + expires + "; path=/";
        }

        function getCookie(name) {
            let cookies = document.cookie.split("; ");
            for (let cookie of cookies) {
                let [key, value] = cookie.split("=");
                if (key === name) return JSON.parse(value || "[]");
            }
            return [];
        }


		$(window).on("resize", function () {
			if (statsLoaded) {
				syncHeaderOnResize();
			}
			initializeStatsTable()
		});
		
		function fetchStats(date) {
			fetch("/stats?date=" + date)
				.then(response => response.json())
				.then(data => {
					console.log("Stats data:", data);
					// Process your stats data as needed...
				})
				.catch(error => console.error("Error fetching stats:", error));
		}
    </script>
</body>
</html>