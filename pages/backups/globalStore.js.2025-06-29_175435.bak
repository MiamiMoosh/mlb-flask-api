import { create } from 'zustand';
import AsyncStorage from '@react-native-async-storage/async-storage';

export const useGlobalStore = create((set, get) => ({
  inventory: [],
  finalMessage: 'ðŸŽŠ Thanks for playing!',
  cardImage: null,
  containerImage: null,

  // New state
	analytics: {
	  sessionCount: 0,
	  allTimeRarity: { common: 0, rare: 0, epic: 0, legendary: 0 },
	  itemFrequency: {},
	  logs: []
	},

	// Extend hydrate:
	hydrate: async () => {
	  const keys = ['inventory', 'finalMessage', 'cardImage', 'containerImage', 'analytics'];
	  for (let key of keys) {
		const val = await AsyncStorage.getItem(key);
		if (val) set({ [key]: JSON.parse(val) });
	  }
	},

	presets: {
	  theme: 'light',
	  layout: '4x5',
	  autoRevealDelay: 1500,
	  lockEnabled: true,
	  darkMode: false,
	  luckyPick: false
	},

	toggleTheme: async () => {
	  const curr = get().presets.darkMode;
	  const updated = { ...get().presets, darkMode: !curr };
	  await AsyncStorage.setItem('presets', JSON.stringify(updated));
	  set({ presets: updated });
	},

	setPresetValue: async (key, value) => {
	  const updated = { ...get().presets, [key]: value };
	  await AsyncStorage.setItem('presets', JSON.stringify(updated));
	  set({ presets: updated });
	},
	
	// New action
	logSession: async (items) => {
	  const rarityMap = { common: 0, rare: 0, epic: 0, legendary: 0 };
	  const itemMap = {};
	  const ts = new Date().toISOString();

	  items.forEach((name) => {
		const r = getRarityFromName(name);
		rarityMap[r] += 1;
		itemMap[name] = (itemMap[name] || 0) + 1;
	  });

	  const prev = get().analytics;
	  const updatedRarities = { ...prev.allTimeRarity };

	  for (let r in rarityMap) {
		updatedRarities[r] += rarityMap[r];
	  }

	  const updatedItemFreq = { ...prev.itemFrequency };
	  for (let item in itemMap) {
		updatedItemFreq[item] = (updatedItemFreq[item] || 0) + itemMap[item];
	  }

	  const newLog = {
		timestamp: ts,
		picked: items,
		rarityCounts: rarityMap
	  };

	  const updated = {
		sessionCount: prev.sessionCount + 1,
		allTimeRarity: updatedRarities,
		itemFrequency: updatedItemFreq,
		logs: [...prev.logs, newLog]
	  };

	  await AsyncStorage.setItem('analytics', JSON.stringify(updated));
	  set({ analytics: updated });
	}

  // Save functions
  setFinalMessage: async (msg) => {
    await AsyncStorage.setItem('finalMessage', JSON.stringify(msg));
    set({ finalMessage: msg });
  },

  setCardImage: async (uri) => {
    await AsyncStorage.setItem('cardImage', JSON.stringify(uri));
    set({ cardImage: uri });
  },

  setContainerImage: async (uri) => {
    await AsyncStorage.setItem('containerImage', JSON.stringify(uri));
    set({ containerImage: uri });
  },

  setInventory: async (list) => {
    await AsyncStorage.setItem('inventory', JSON.stringify(list));
    set({ inventory: list });
  }
}));