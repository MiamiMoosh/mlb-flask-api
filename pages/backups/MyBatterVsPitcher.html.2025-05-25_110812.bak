<!DOCTYPE html>
<html lang="en">
<head>
  <title>Daily MLB Batter Vs. Pitcher History</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
  <link rel="icon" type="image/png" href="{{ url_for('static', filename='images/favicon-96x96.png') }}" sizes="96x96">
  <link rel="icon" type="image/svg+xml" href="{{ url_for('static', filename='images/favicon.svg') }}" />
  <link rel="shortcut icon" href="{{ url_for('static', filename='images/favicon.ico') }}" />
  <link rel="apple-touch-icon" sizes="180x180" href="{{ url_for('static', filename='images/apple-touch-icon.png') }}" />
  <meta name="apple-mobile-web-app-title" content="BvP" />
  <link rel="manifest" href="{{ url_for('static', filename='images/site.webmanifest') }}" />
  <style>
    /* üî∑ General Page Styling */
    body { background-color: #E0E8D6; font-family: Arial, sans-serif; text-align: center; font-size: 12px; }
    .current-date { font-size: 14px; font-weight: bold; padding: 5px 10px; background: #C0C8B6; color: white; border-radius: 6px; }
    
    /* üñ• Dashboard & Panel Styling */
    .dashboard-panel { background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); padding: 16px; margin-bottom: 20px; }
    #header-container, #nav-container { display: flex; align-items: center; justify-content: space-between; padding: 20px; background: white; border-bottom: 2px solid #C0C8B6; }
    #collapsible-container, #stats-container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); }
    #header-nav-panel, #stats-panel { display: flex; flex-direction: column; background: white; padding: 20px; border-radius: 8px; }
    #stats-panel { display: flex; flex-direction: column; background: white; padding: 20px; border-radius: 8px; }
    .date-nav-container { background-color: #F8F9FA; padding: 10px; border-radius: 6px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center; gap: 15px; border-top: 2px solid #C0C8B6; padding-top: 8px; }
    .date-card { background: white; padding: 15px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); width: fit-content; margin: auto; text-align: center; }
    .card-header { font-weight: bold; font-size: 16px; color: #333; margin-bottom: 8px; }
    .header-container { display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; width: 100%; } 
    .header-content { flex: 1; display: flex; flex-direction: column; align-items: flex-start; text-align: left; }
    .date-navigation { background-color: #F8F9FA; padding: 8px 12px; border-radius: 6px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); width: fit-content; margin-top: 8px; }
    .date-label { font-weight: bold; text-transform: uppercase; margin-bottom: 4px; }
    .date-options { display: flex; gap: 10px; align-items: center; }
    
    /* üîó Navigation Styling */
    .nav-container { display: flex; justify-content: center; align-items: center; margin: 15px 0; }
	.nav-link { text-decoration: none; font-size: 13px; font-weight: bold; padding: 10px; color: #888; transition: all 0.3s ease-in-out; }
	.nav-link:hover { text-decoration: underline; color: #555; }
	.date-tabs { gap: 4px; margin-top: 5px; border-bottom: 2px solid #AA0000; align-self: flex-start; white-space: nowrap; }
	.date-tab { padding: 10px 12px; background-color: #1D1F21; color: #FFFFFF; text-decoration: none; border: 1px solid #AA0000; border-bottom: none; border-radius: 5px 5px 0 0; }
	.date-tab:hover { background-color: #50555C; }
	.date-tab.current-date { background-color: #AA0000; }
	.tabs-search-container { display: flex; flex-direction: row; align-items: stretch; width:98%;}
	#date-nav-overlay { order: 0; display: flex; align-items: center; background-color: #2e2e2e; border: 1px solid #AA0000; padding: 5px 10px; }
	#search-container { flex-grow: 1; margin: 0 !important; padding: 5px 10px !important; background-color: #2e2e2e !important; border: 2px solid #AA0000 !important; display: flex; align-items: center; overflow: hidden; }
	#date-nav-overlay,#search-container {   position: relative;   top: 0; }


    /* üìä Table Styling */
    table { width: 90%; border-collapse: collapse; margin: auto; opacity: 0; animation: fadeIn 1s forwards; }
    th, td { text-align: left; padding: 6px; border: 1px solid #ddd; font-size: 11px; }
    table.dataTable { width: 100%; table-layout: auto !important; }
    .dataTables_scrollBody { width: 100% !important; }
    table.dataTable th, table.dataTable td { padding: 3px 2px; font-size: 10px; vertical-align: middle; text-align: left; }
    
    /* ‚≠ê Player Management Elements */
    .star { cursor: pointer; font-size: 16px; padding-left: 5px; transition: all 0.2s ease-in-out; color: gray; }
    .star.selected { color: gold; }
    .star:hover { text-shadow: 0px 0px 5px gold; }
    .favorite-container { margin-top: 15px; font-size: 14px; font-weight: bold; }
    .remove-btn { font-size: 14px; cursor: pointer; color: red; margin-right: 4px; }
    #player-list span { display: inline-block; margin-right: 10px; }
    
    /* üîò Button Styling */
    .clear-btn { display: block; width: 80%; margin: 8px auto; padding: 5px; border: none; background-color: #f1f1f1; color: #555; font-size: 11px; font-weight: normal; border-radius: 4px; cursor: pointer; transition: 0.2s ease-in-out; }
    .clear-btn:hover { background-color: #e0e0e0; }
    #togglePlayersBtn { display: block; margin: 10px auto; padding: 6px 12px; border: none; background-color: #666; color: white; border-radius: 5px; cursor: pointer; transition: 0.3s; font-size: 12px; }
    #togglePlayersBtn:hover { background-color: #444; }
    
    /* üîç Search Box Styling */
    .dataTables_filter { width: 96% !important; margin: 0 !important; padding: 0 !important; background: transparent !important; border: none !important; display: flex !important; align-items: center !important; text-align: right; line-height: 20px; height: 100% !important; }
	.dataTables_filter label { width: 100% !important; margin: 0 !important; padding: 0 !important; }
	.dataTables_filter input { width: 100% !important; padding: 0 !important; margin: 0 !important; box-sizing: border-box; background: #f8f9fa; height: 100% !important; border: 2px solid #AA0000; border-radius: 0; font-size: 26px; color: #333; }
	.dataTables_filter input::placeholder { color: #888; font-style: italic; }
	.dataTables_filter input:hover { border-color: #0056b3; background-color: #e9ecef; }
	.dataTables_filter input:focus { outline: none; border-color: #004085; box-shadow: 0 0 5px #007bff; }
	.dataTables_scrollHead { overflow: hidden !important; }
	.dataTables_scrollHeadInner { width: 100% !important; }
	.dataTables_scrollHeadInner table thead th { background-color: #1D1F21 !important; color: #FFFFFF !important; font-weight: bold !important; padding: 12px !important; border: 1px solid #AA0000 !important; }

    /* üé® Animations & Misc */
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .player-details { font-size: 8px; color: #888; margin-left: 4px; }
    
    /* üìà Stats Table Styling */
    #stats-table thead { background-color: #1D1F21; color: #FFFFFF; font-weight: bold; border: 1px solid #AA0000; border-bottom-width: 3px; }
    #stats-table thead th { padding: 12px; border: 1px solid #AA0000; }
    #stats-table tbody tr { border: 1px solid #AA0000; }
    #stats-table tbody tr:nth-child(odd) { background-color: #2C2F33; }
    #stats-table tbody tr:nth-child(even) { background-color: #393C41; }
    #stats-table tbody tr:hover { background-color: #50555C; border: 1px solid #AA0000; }
    #stats-table td { padding: 10px; border: 1px solid #AA0000; color: #E0E0E0; }
    #stats-container { display: flex; flex-direction: column; }

    
    /* üî¢ Column Adjustments */
    td:nth-child(2), td:nth-child(4) { text-align: left; width: 20% !important; padding-left: 4px; }
    td:nth-child(1), td:nth-child(3), td:nth-child(5), td:nth-child(6), td:nth-child(7), td:nth-child(8),
    td:nth-child(9), td:nth-child(10), td:nth-child(11), td:nth-child(12), td:nth-child(13), td:nth-child(14),
    td:nth-child(15), td:nth-child(16) { width: 3%; padding-left: 4px; }
    table.dataTable thead th { text-align: left !important; }
    table.dataTable thead th.sorting, table.dataTable thead th.sorting_asc, table.dataTable thead th.sorting_desc {
      text-align: left !important; padding-left: 6px !important;
    }
    table.dataTable th { text-align: left !important; }
    
    /* üìé Collapsible Sections */
    .collapsible-container { width: 90%; margin: 0 auto; text-align: center; }
    .toggle-collapse { display: block; width: 100%; padding: 8px; background-color: #f8f9fa; color: #333; font-size: 13px; font-weight: bold; border: 1px solid #ddd; cursor: pointer; border-radius: 5px; transition: 0.3s ease-in-out; }
    .toggle-collapse:hover { background-color: #e2e6ea; }
    #player-list-wrapper { display: none; padding: 10px; border: 1px solid #ddd; background-color: #f8f9fa; }
    
    /* üé≠ Logo & Notes */
    #logo { width: 425px; height: 55px; margin-right: 10px; }
    .info-note { font-size: 12px; color: #556B2F; margin-bottom: 10px; text-align: left; }
    .fire-icon { font-size: 1.2em; display: inline; }
    .hot-streak { font-size: 1.2em; display: inline-block; margin-left: 5px; }
    .streak-info { background: linear-gradient(to right, #B71C1C, #D32F2F); color: #FFFFFF; font-weight: bold; text-align: center; padding: 5px; border: 1px solid #AA0000; border-radius: 5px; }
    .streak-info td:first-child { background-color: white !important; border: none; }
    
    /* Ad sections */
    .ad-container { flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 100%; max-width: 600px; height: auto; overflow: hidden; }
    .ad-box { width: 100%; height: auto; max-height: 250px; }
    
    /* Mobile Users */
    @media (max-width: 768px) {
      .header-container { flex-direction: column; align-items: center; text-align: center; }
      .header-content { align-items: center; text-align: center; }
      .ad-container { width: 100%; justify-content: center; margin-top: 10px; }
      .ad-box { width: 100%; height: auto; max-height: 250px; }
      #stats-container { overflow-x: auto; }
      table { width: 100%; font-size: 10px; }
      th, td { padding: 4px; }
      .nav-link, .clear-btn, .toggle-collapse, #togglePlayersBtn { padding: 12px; font-size: 14px; }
	  .date-tab {font-size: 10px;  /* Adjust font size as necessary */  }
    }
	@media (max-width: 480px) {
	  .date-tab {font-size: 10px;  /* Adjust font size as necessary */  }
	}

  </style>
</head>
<body>
  <script>
    let selectedDate = "{{ date }}";  // Fetched from Flask
  </script>
  
  <div id="header-nav-panel" class="dashboard-panel">
    <div class="header-container">
      <div class="header-content">
        <img id="logo" src="{{ url_for('static', filename='images/BVPHeader425x55.png') }}" alt="BvP Logo">
        <h1>Daily MLB Batter vs. Pitcher History</h1>
      </div>
    </div>
  </div>
  
  <div id="stats-panel" class="dashboard-panel">
    <div class="collapsible-container">
      <button class="toggle-collapse" onclick="toggleCollapse()">‚ñº Manage My Players</button>
      <div id="player-list-wrapper">
        <p class="info-note">‚≠ê Click the star icon next to a player's name to add them to this list.</p>
        <div id="player-list"></div>
        <div class="clear-button-container">
          <button class="clear-btn" onclick="clearFavorites()">Clear My Players</button>
        </div>
      </div>
    </div>
    <div id="togglePlayersContainer">
      <button id="togglePlayersBtn" onclick="toggleFavorites()">Show My Players Only</button>
    </div>
    <div id="stats-container"></div>
  </div>
  
  <script>
    // Global variables
    let statsLoaded = false;
let favoritePlayers = getCookie("favoritePlayers");
let showingFavorites = false;

// Consolidated initialization
$(document).ready(function () {
  console.log("üöÄ Consolidated initialization started.");

  let urlParams = new URLSearchParams(window.location.search);
  let selectedDate = urlParams.get("date") || "{{ date }}";
  console.log("üìÖ Final Selected Date:", selectedDate);

  // Pre-calculate dates for navigation
  let baseDate = new Date(selectedDate + "T00:00:00");
  let prevDate = new Date(baseDate);
  prevDate.setDate(baseDate.getDate() - 1);
  let nextDate = new Date(baseDate);
  nextDate.setDate(baseDate.getDate() + 1);

  // Load stats for the selected date.
  loadStats(selectedDate);
  statsLoaded = true;

  // Update date navigation after a short delay (to ensure elements exist)
  setTimeout(function () {
    let prevTab = document.getElementById("prev-day-tab");
    let nextTab = document.getElementById("next-day-tab");

    if (prevTab && nextTab) {
      prevTab.href = "/?date=" + prevDate.toISOString().split("T")[0];
      document.getElementById("prev-date-tab").textContent = formatReadableDate(prevDate);
      document.getElementById("date-display-tab").textContent = formatReadableDate(baseDate);
      document.getElementById("next-date-tab").textContent = formatReadableDate(nextDate);
      nextTab.href = "/?date=" + nextDate.toISOString().split("T")[0];
    } else {
      console.warn("‚ö†Ô∏è Date navigation elements not found.");
    }
  }, 100);

  updateFavoriteList();
  $("#stats-table").on("draw.dt", adjustTableWidth);
  adjustTableWidth();

  $(window).on("resize", function () {
    clearTimeout(window.resizeTimer);
    window.resizeTimer = setTimeout(function () {
      if (statsLoaded) {
        adjustStatsTableColumns(); // Adjust the header first
        $("#stats-table").DataTable().columns.adjust().draw(); // Then adjust the body
      }
    }, 50);
  });
});

// FUNCTION TO NORMALIZE PLAYER NAMES
function normalizeName(name) {
  return name.replace(/\s+/g, " ").trim().toLowerCase();
}

function adjustStatsTableColumns() {
  let dt = $("#stats-table").DataTable();
  dt.columns.adjust();

  let tableWidth = $(".dataTables_scrollBody table").outerWidth();
  $(".dataTables_scrollHeadInner").css({ "width": tableWidth + "px", "min-width": tableWidth + "px", "max-width": tableWidth + "px" });

  $(".dataTables_scrollHeadInner table thead th").each(function (index) {
    let bodyColumnWidth = $(".dataTables_scrollBody table tbody tr:first-child td").eq(index).outerWidth() || $(this).outerWidth();
    if (bodyColumnWidth > 0) {
      dt.column(index).width(bodyColumnWidth);
      $(this).css({ "width": bodyColumnWidth + "px", "min-width": bodyColumnWidth + "px", "max-width": bodyColumnWidth + "px" });
    }
  });

  dt.columns.adjust().draw(); // Force redraw to apply dynamic widths

  console.log("Updated column widths:", $("#stats-table").DataTable().settings()[0].aoColumns.map(col => col.sWidth));
}
    
	
	
	
	// loadStats function - loads data and builds the table with the date navigation overlay.
    function loadStats(selectedDate) {
  console.log("Inside loadStats, selectedDate:", selectedDate);
  
    var streakMapping = {};
	window.streakMapping = {};
  $("#stats-container").html("<strong class='loading-message'>‚è≥ Loading Data...</strong>");

  $.when(
    $.getJSON(`/stats?date=${selectedDate}`),
    $.getJSON(`/streak-data`)
  ).done(function (statsResponse, streakResponse) {
    let statsData = statsResponse[0];
    let streakData = streakResponse[0];
    console.log("[DEBUG] Loaded API data:", statsData);
    console.log("[DEBUG] Streak Data:", streakData);

    window.statsData = statsData;
    window.streakData = streakData;

    $("#stats-container").empty();
    if (!statsData || statsData.length === 0) {
      $("#stats-container").html("<div class='error-message'>‚ö† No data available for this date.</div>");
      return;
    }

    // Pre-calculate dates for navigation
    let baseDate = new Date(selectedDate + "T00:00:00");
    let prevDate = new Date(baseDate);
    prevDate.setDate(baseDate.getDate() - 1);
    let nextDate = new Date(baseDate);
    nextDate.setDate(baseDate.getDate() + 1);

    // Destroy any existing DataTables instance
    if ($.fn.DataTable.isDataTable("#stats-table")) {
      $("#stats-table").DataTable().destroy();
    }

    // Build table HTML with a tabs-search container.
    let tableHTML = `
      <div class="tabs-search-container">
        <div id="date-nav-overlay">
          <a id="prev-day-tab" class="date-tab" href="#">‚Üê <span id="prev-date-tab"></span></a>
          <a id="current-day-tab" class="date-tab current-date" href="#">
            <span id="date-display-tab"></span>
          </a>
          <a id="next-day-tab" class="date-tab" href="#">
            <span id="next-date-tab"></span> ‚Üí</a>
        </div>
        <div id="search-container"></div>
      </div>
      <table id="stats-table">
        <thead>
          <tr>
            <th>TM</th>
            <th>Batter</th>
            <th>TM</th>
            <th>Pitcher</th>
            <th>PA</th>
            <th>AVG</th>
            <th>HR</th>
            <th>SO</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>`;
    $("#stats-container").html(tableHTML);
    console.log("Table HTML injected into #stats-container.");

    // Initialize DataTables with our custom initComplete callback.
    var dt = $("#stats-table").DataTable(
		{ 
			paging: false, scrollY: "600px", ordering: true, autoWidth: false, info: false, 
			language: { search: "", searchPlaceholder: "Search Players" },      
			columns: 
			[	{ data: "team_batter", title: "TM" },
				{ data: "batter", title: "Batter" },
				{ data: "team_pitcher", title: "TM" },
				{ data: "pitcher", title: "Pitcher" },
				{ data: "stats.PA", title: "PA" },
				{ data: "stats.AVG", title: "AVG" },
				{ data: "stats.HR", title: "HR" },
				{ data: "stats.SO", title: "SO" }
			],
			initComplete: function(settings, json) {
				var filterElem = $(".dataTables_filter").detach();
				var tscontainerWidth = $("#stats-table").outerWidth() - 15;		
				$(".tabs-search-container").css({"width": tscontainerWidth + "px"});
				$("#search-container").empty().append(filterElem);
				$("#search-container").css({"flex-grow": "1",	"padding": "0",	"margin": "0", "background": "transparent",	"border": "none"  });
				filterElem.css({"display": "flex","align-items": "center", "justify-content": "flex-end",	"width": "100%", "margin": "0",	"padding": "0",	"background": "transparent", "border": "none"  });
			}
		}
	);
    console.log("DataTables initialized.");
    dt.columns.adjust().draw();

    // Build a mapping for streak data.
    if (streakData && streakData.players) {
	  streakData.players.forEach(function (player) {
		if (player.player && typeof player.player === "string") {
		  let normalizedName = normalizeName(player.player);
		  streakMapping[normalizedName] = player;
		}
	  });
	}
	console.log("[DEBUG] ‚úÖ Streak Mapping Initialized:", streakMapping);


    // Add rows to the DataTable.
    statsData.forEach(function (row) {
  console.log("[DEBUG] Processing row for:", row.batter);

  let batterStar = `<span class='star ${favoritePlayers.includes(row.batter) ? "selected" : ""}' data-player='${row.batter}' onclick='toggleFavorite("${row.batter}")'>‚ú©</span>`;
  let pitcherStar = `<span class='star ${favoritePlayers.includes(row.pitcher) ? "selected" : ""}' data-player='${row.pitcher}' onclick='toggleFavorite("${row.pitcher}")'>‚ú©</span>`;

  let batterName = `${batterStar} ${row.batter}`;
  if (row.batter_info) {
    batterName += ` <span class='player-details'>${row.batter_info}</span>`;
  }

  let pitcherName = `${pitcherStar} ${row.pitcher}`;
  if (row.pitcher_hand) {
    pitcherName += ` <span class='player-details'>${row.pitcher_hand}</span>`;
  }

  let normalizedBatterName = normalizeName(row.batter);
  let streakInfo = streakMapping[normalizedBatterName];

  let playerData = {
    team_batter: row.team_batter,
    batter: batterName,
    team_pitcher: row.team_pitcher,
    pitcher: pitcherName,
    stats: {
      PA: row.stats.PA,
      AVG: row.stats.AVG,
      HR: row.stats.HR,
      SO: row.stats.SO
    }
  };

  var playerRowNode = dt.row.add(playerData).node();
  $(playerRowNode).attr("data-batter", row.batter);

  // Append streak row directly under player's row
  if (streakInfo) {
    $(playerRowNode).attr("data-hot-streak", "true");

    let streakRowContent = `<tr class="streak-info">
      <td colspan="8"><strong>${row.batter} is on a ${streakInfo.games}-game hit streak, hitting ${streakInfo.ba} with ${streakInfo.hr} HRs and ${streakInfo.rbi} RBIs.</strong></td>
    </tr>`;

    $(playerRowNode).after(streakRowContent); // Directly insert row below player
    console.log("[DEBUG] ‚úÖ Streak row inserted for:", row.batter);
  }
});

dt.draw(false);
dt.columns.adjust();
console.log("[DEBUG] Table drawn and columns adjusted.");

    updateFavoriteList();
    statsLoaded = true;

    // Update date navigation after a delay.
    setTimeout(function () {
      let prevTab = document.getElementById("prev-day-tab");
      let nextTab = document.getElementById("next-day-tab");
      if (prevTab && nextTab) {
        prevTab.href = "/?date=" + prevDate.toISOString().split("T")[0];
        document.getElementById("prev-date-tab").textContent = formatReadableDate(prevDate);
        document.getElementById("date-display-tab").textContent = formatReadableDate(baseDate);
        document.getElementById("next-date-tab").textContent = formatReadableDate(nextDate);
        nextTab.href = "/?date=" + nextDate.toISOString().split("T")[0];
        console.log("üîÑ Date navigation updated inside loadStats.");
      } else {
        console.warn("‚ö†Ô∏è Date navigation elements not found.");
      }
    }, 200);

    $(window).on("resize", function () {
      clearTimeout(window.resizeTimer);
      window.resizeTimer = setTimeout(function () {
        if (statsLoaded) {
			dt.columns.adjust();
			var tscontainerWidth = $("#stats-table").outerWidth();
			$(".tabs-search-container").css({"width": tscontainerWidth + "px"});

        }
      }, 200);
    });
  }).fail(function (jqXHR, textStatus, errorThrown) {
    console.error("Error fetching stats:", textStatus, errorThrown);
    $("#stats-container").html("<div class='error-message'>‚ö† Error fetching data.</div>");
  });
}

// Utility function for initializing the table
function initializeStatsTable() {
  if ($.fn.DataTable.isDataTable("#stats-table")) {
    $("#stats-table").DataTable().destroy();
  }
  $("#stats-table").DataTable({
    autoWidth: false,
    paging: false,
    info: false,
    lengthChange: false,
    columns: [
      { data: "team_batter", title: "TM" },
      { data: "batter", title: "Batter" },
      { data: "team_pitcher", title: "TM" },
      { data: "pitcher", title: "Pitcher" },
      { data: "stats.PA", title: "PA" },
      { data: "stats.AVG", title: "AVG" },
      { data: "stats.HR", title: "HR" },
      { data: "stats.SO", title: "SO" }
    ]
  }).columns.adjust().draw();
}
		function syncHeaderOnResize() {
		setTimeout(() => {
		let tableWidth = $(".dataTables_scrollBody table").outerWidth();
		let headerWidth = $(".dataTables_scrollHeadInner").outerWidth();

		$(".dataTables_scrollHeadInner").css({
		  "width": tableWidth + "px",
		  "min-width": tableWidth + "px",
		  "max-width": tableWidth + "px"
		});

		$("#stats-table").DataTable().columns.adjust().draw();
		}, 100);
		}

		function adjustTableWidth() {
		let table = $("#stats-table");
		if (table.length === 0) return; // Prevent errors if table isn't found

		let hasScrollbar = table.get(0).scrollHeight > table.get(0).clientHeight;
		table.css("width", hasScrollbar ? "calc(100% - 16px)" : "100%");
		}

		function formatReadableDate(dateObj) {
		  let day = dateObj.getDate();
		  let suffix = (day % 10 === 1 && day % 100 !== 11) ? "st" :
					   (day % 10 === 2 && day % 100 !== 12) ? "nd" :
					   (day % 10 === 3 && day % 100 !== 13) ? "rd" : "th";
		  let month = dateObj.toLocaleString("en-US", { month: "long" });
		  let year = dateObj.getFullYear();
		  return month + " " + day + suffix + ", " + year;
		}

		function toggleFavorite(player) {
		if (!favoritePlayers) favoritePlayers = [];

		if (favoritePlayers.includes(player)) {
		favoritePlayers = favoritePlayers.filter(p => p !== player);
		} else {
		favoritePlayers.push(player);
		}

		setCookie("favoritePlayers", favoritePlayers, 180);
		document.querySelectorAll(`.star[data-player="${player}"]`).forEach(el => el.classList.toggle("selected"));
		updateFavoriteList();
		}

		function updateFavoriteList() {
		let listContainer = $("#player-list").empty();
		favoritePlayers.forEach(player => {
		listContainer.append(`<span class="remove-btn" onclick="toggleFavorite('${player}')">‚ùå</span><span> ${player}</span>`);
		});
		}

		function applyFavoritesFilter() {
		$("#stats-table tbody tr").each(function() {
		if ($(this).hasClass("streak-info")) {
		  let prevRow = $(this).prev();
		  $(this).css("display", prevRow.length && prevRow.css("display") !== "none" ? "table-row" : "none");
		} else {
		  let batterName = $(this).find("td:nth-child(2) span.star")?.data("player");
		  let pitcherName = $(this).find("td:nth-child(4) span.star")?.data("player");

		  let isFavorited = (batterName && favoritePlayers.includes(batterName)) || 
							(pitcherName && favoritePlayers.includes(pitcherName));

		  $(this).css("display", showingFavorites && !isFavorited ? "none" : "table-row");
		}
		});

		$("#stats-table").DataTable().columns.adjust();
		}
    
    function toggleFavorites() {
		if (typeof applyFavoritesFilter !== "function") {
		console.warn("‚ö†Ô∏è applyFavoritesFilter() is not defined.");
		return;
		}

		showingFavorites = !showingFavorites;
		$("#togglePlayersBtn").text(showingFavorites ? "Show All Players" : "Show My Players");
		applyFavoritesFilter();
		}

		function toggleCollapse() {
		let wrapper = document.getElementById("player-list-wrapper");
		let button = document.querySelector(".toggle-collapse");

		if (!wrapper || !button) {
		console.warn("‚ö†Ô∏è Collapse elements not found.");
		return;
		}

		let isHidden = wrapper.style.display === "none" || wrapper.style.display === "";
		wrapper.style.display = isHidden ? "block" : "none";
		button.innerHTML = isHidden ? "‚ñ≤ Manage My Players" : "‚ñº Manage My Players";
		}

		function clearFavorites() {
		favoritePlayers = [];

		setCookie("favoritePlayers", []);
		updateFavoriteList();

		$(".star").removeClass("selected");
		console.log("‚≠ê Favorites cleared.");
		}

		function setCookie(name, value, days) {
		if (typeof value !== "string" && !Array.isArray(value)) {
		console.warn("‚ö†Ô∏è Invalid cookie value type.");
		return;
		}

		let expires = "";
		if (days) {
		let date = new Date();
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		expires = "; expires=" + date.toUTCString();
		}

		document.cookie = name + "=" + encodeURIComponent(JSON.stringify(value)) + expires + "; path=/";
		}

		function getCookie(name) {
		let cookies = document.cookie.split("; ");

		for (let cookie of cookies) {
		let [key, value] = cookie.split("=");
		if (key === name) {
		  try {
			return JSON.parse(decodeURIComponent(value || "[]"));
		  } catch (error) {
			console.error("‚ùå Error parsing cookie:", error);
			return [];
		  }
		}
		}

		return [];
		}
    
    function fetchStats(date) {
		if (!date || typeof date !== "string") {
		console.error("Invalid date provided!");
		return;
		}

		console.log(`Fetching stats for date: ${date}`);

		Promise.all([
		fetch(`/stats?date=${date}`).then(response => response.json()),
		fetch("/streak-data").then(response => response.json())
		])
		.then(([statsData, streakData]) => {
		console.log("‚úÖ Stats Data Loaded:", statsData);
		console.log("‚úÖ Raw Streak Data:", streakData);

		if (!streakData.players || !Array.isArray(streakData.players)) {
		  console.error("‚ö†Ô∏è 'players' property missing or not an array!");
		  return;
		}

		// Filter out invalid players
		const validPlayers = streakData.players.filter(item =>
		  item.player && !item.player.includes("Player") && !item.player.includes("Games\t")
		);

		console.log("‚úÖ Valid Players Array:", validPlayers);

		// Extract player details only if necessary
		validPlayers.forEach(player => {
		  if (player.player.includes("\t")) {
			const parts = player.player.split("\t");
			console.log("üìä Extracted Data Parts:", parts);
		  }
		});

		})
		.catch(error => {
		console.error("‚ùå Error fetching stats or streak data:", error);
		});
		}
    
    // End of script
    </script>
</body>
</html>