import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Button,
  TextInput,
  FlatList,
  TouchableOpacity,
  Image,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import { useGlobalStore } from '../store/globalStore';
import { animationPresets } from '../utils/animationPresets';
import AnimatedCard from './AnimatedCard';

const getRarityFromName = (name) => {
  const lowered = name.toLowerCase();
  if (lowered.match(/legendary|dragon|phoenix/)) return 'legendary';
  if (lowered.match(/epic|crystal|storm/)) return 'epic';
  if (lowered.match(/rare|silver|arcane/)) return 'rare';
  return 'common';
};

export default function MainFlowScreen({ navigation }) {
  const {
    inventory,
    finalMessage,
    cardImage,
    containerImage,
    hydrate,
    setInventory
  } = useGlobalStore();

  const [shuffledItems, setShuffledItems] = useState([]);
  const [numToPick, setNumToPick] = useState('');
  const [pickedItems, setPickedItems] = useState([]);
  const [revealIndex, setRevealIndex] = useState(0);
  const [showFinal, setShowFinal] = useState(false);

  useEffect(() => {
    hydrate();
    scrollThenDrop();
  }, []);

  const scrollThenDrop = () => {
    // Simulate intro animations with timeout
    setTimeout(() => {
      // Drop effect could be added here later
    }, 3000);
  };

  const shuffleAndPick = () => {
    const flatList = inventory.flatMap(item =>
      Array(item.quantity).fill(item.name)
    );
    const shuffled = flatList.sort(() => 0.5 - Math.random());
    const picked = shuffled.slice(0, parseInt(numToPick));
    setPickedItems(picked);
    setRevealIndex(0);
    setShowFinal(false);
  };

  const showNextItem = () => {
    if (revealIndex < pickedItems.length - 1) {
      setRevealIndex(prev => prev + 1);
    } else {
      setShowFinal(true);
      reduceInventoryQuantities();
    }
  };

  const reduceInventoryQuantities = () => {
    const updated = [...inventory];
    pickedItems.forEach((itemName) => {
      const index = updated.findIndex(i => i.name === itemName);
      if (index !== -1 && updated[index].quantity > 0) {
        updated[index].quantity -= 1;
      }
    });
    setInventory(updated);
  };

  const replayLast = () => {
    setShowFinal(false);
  };

  const resetOrder = () => {
    setPickedItems([]);
    setNumToPick('');
    setRevealIndex(0);
    setShowFinal(false);
  };

  return (
    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <Text style={styles.title}>Order Picker</Text>

      {containerImage && (
        <Image source={{ uri: containerImage }} style={styles.containerPreview} />
      )}

      {!pickedItems.length ? (
        <>
          <Text style={styles.label}>Enter number of items to pick:</Text>
          <TextInput
            style={styles.input}
            keyboardType="numeric"
            value={numToPick}
            onChangeText={setNumToPick}
            placeholder="e.g. 20"
          />
          <Button title="Start Picking" onPress={shuffleAndPick} />
        </>
      ) : (
        <>
          <FlatList
            data={pickedItems.slice(0, revealIndex + 1)}
            keyExtractor={(item, index) => index.toString()}
            numColumns={4}
            renderItem={({ item }) => (
              <AnimatedCard
                name={item}
                rarity={getRarityFromName(item)}
                imageSource={cardImage}
              />
            )}
            contentContainerStyle={styles.grid}
          />
          {!showFinal ? (
            <Button title="Show Next Item" onPress={showNextItem} />
          ) : (
            <>
              <Text style={styles.finalMessage}>{finalMessage}</Text>
              <Button title="Replay Last Item" onPress={replayLast} />
              <Button title="Start New Order" onPress={resetOrder} />
            </>
          )}
        </>
      )}

      <View style={styles.bottomButtons}>
        <Button title="Edit Inventory" onPress={() => navigation.navigate('Inventory')} />
        <Button title="Settings" onPress={() => navigation.navigate('Settings')} />
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, flex: 1, backgroundColor: '#fff' },
  title: { fontSize: 28, fontWeight: 'bold', marginBottom: 10 },
  label: { fontSize: 16 },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    padding: 8,
    marginVertical: 10,
    borderRadius: 6
  },
  grid: { alignItems: 'center', marginTop: 20 },
  finalMessage: {
    fontSize: 20,
    fontWeight: '600',
    marginVertical: 20,
    textAlign: 'center'
  },
  containerPreview: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 8,
    alignSelf: 'center'
  },
  bottomButtons: {
    marginTop: 30,
    flexDirection: 'row',
    justifyContent: 'space-between'
  }
});